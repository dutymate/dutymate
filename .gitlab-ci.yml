stages:
  - check_infrastructure
  - check_frontend
  - build_backend

check_infrastructure:
  stage: check_infrastructure
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - infrastructure/**/*
  image:
    name: hashicorp/terraform:latest
    entrypoint: [ "" ]
  script:
    - terraform fmt -recursive -check
    - terraform validate
  allow_failure: false

check_frontend:
  stage: check_frontend
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - frontend/**/*
      when: always
  image: node:22.13-alpine
  cache:
    paths:
      - frontend/node_modules
    key: $CI_PROJECT_NAME-frontend-cache
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run lint
    - npm run format

build_backend:
  stage: build_backend
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - backend/**/*
      when: always
  image: gradle:latest
  cache:
    paths:
      - backend/.gradle/
      - backend/build/
      - backend/.sonar/cache/
    key: $CI_PROJECT_NAME-backend-cache
  before_script:
    - cd backend
    - cp $ENV_FILE .env
  script:
    - gradle build --build-cache
    - gradle sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.qualitygate.wait=true
  after_script:
    - cd backend
    - chmod +x scripts/ci/generate-codequality-report-from-checkstyle.sh
    - scripts/ci/generate-codequality-report-from-checkstyle.sh build/reports/checkstyle/main.xml > checkstyle-report.json
  artifacts:
    when: always
    reports:
      codequality:
        - backend/checkstyle-report.json
